openapi: 3.0.0
info:
  title: User Management API
  description: API for managing user accounts and events
  version: 1.0.0

servers:
  - url: /api/v1
    description: Main API server

paths:
  # User APIs
  /users:
    post:
      tags:
        - Users
      summary: Create a new user
      description: Register a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request (invalid input)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a paginated list of all users with optional filtering
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/sortOrder'
        - name: role
          in: query
          description: Filter by user role
          schema:
            type: string
            enum: [Admin, Organizer, Participant]
        - name: status
          in: query
          description: Filter by user status
          schema:
            type: string
        - name: username
          in: query
          description: Filter by username (contains)
          schema:
            type: string
        - name: email
          in: query
          description: Filter by email (contains)
          schema:
            type: string
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '404':
          description: No users found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve details of a specific user
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Users
      summary: Update user by ID
      description: Update details of an existing user
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Users
      summary: Delete user by ID
      description: Permanently delete a user account
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Event APIs
  /events:
    post:
      tags:
        - Events
      summary: Create a new event
      description: Creates an event with a title, organizer, and other fields.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreate'
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid input or missing fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - Events
      summary: Get all events
      description: Retrieve a paginated and filterable list of events
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/sortOrder'
        - name: title
          in: query
          schema:
            type: string
          description: Filter by event title
        - name: location
          in: query
          schema:
            type: string
          description: Filter by location
        - name: eventType
          in: query
          schema:
            type: string
          description: Filter by event type
        - name: status
          in: query
          schema:
            type: string
          description: Filter by status
        - name: organizer
          in: query
          schema:
            type: string
          description: Filter by organizer ID
      responses:
        '200':
          description: Events retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /events/{id}:
    get:
      tags:
        - Events
      summary: Get event by ID
      parameters:
        - $ref: '#/components/parameters/eventId'
      responses:
        '200':
          description: Event retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Events
      summary: Update event by ID
      parameters:
        - $ref: '#/components/parameters/eventId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreate'
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Events
      summary: Delete event by ID
      parameters:
        - $ref: '#/components/parameters/eventId'
      responses:
        '204':
          description: Event deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  parameters:
    userId:
      name: id
      in: path
      required: true
      description: ID of the user
      schema:
        type: string
        example: xWMyZ4YEGZ
    eventId:
      name: id
      in: path
      required: true
      description: ID of the event
      schema:
        type: string
        example: e1234567890
    page:
      name: page
      in: query
      description: Page number
      schema:
        type: integer
        default: 1
        minimum: 1
    limit:
      name: limit
      in: query
      description: Items per page
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 100
    sortBy:
      name: sortBy
      in: query
      description: Sort by field
      schema:
        type: string
        enum: [createdAt, updatedAt, username, email]
        default: createdAt
    sortOrder:
      name: sortOrder
      in: query
      description: Sort direction
      schema:
        type: string
        enum: [asc, desc]
        default: desc

  schemas:
    UserCreate:
      type: object
      required: [username, email, password]
      properties:
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          format: password
          example: securePassword123
        role:
          type: string
          enum: [Admin, Organizer, Participant]
          default: Participant
        profile:
          type: object
          properties:
            firstName:
              type: string
              example: John
            lastName:
              type: string
              example: Doe
        status:
          type: string
          default: active

    UserUpdate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [Admin, Organizer, Participant]
        profile:
          type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string

    UserResponse:
      type: object
      properties:
        objectId:
          type: string
        username:
          type: string
        email:
          type: string
        role:
          type: string
        profile:
          type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
        status:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
        pagination:
          type: object
          properties:
            total:
              type: integer
            page:
              type: integer
            limit:
              type: integer
            totalPages:
              type: integer

    EventCreate:
      type: object
      required:
        - title
        - description
        - location
        - startDate
        - endDate
        - maxParticipants
        - eventType
        - status
        - organizer
      properties:
        title:
          type: string
        description:
          type: string
        location:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        maxParticipants:
          type: integer
        eventType:
          type: string
        status:
          type: string
        organizer:
          type: string
          description: ID of the user organizing the event

    Event:
      type: object
      properties:
        objectId:
          type: string
        title:
          type: string
        description:
          type: string
        location:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        maxParticipants:
          type: integer
        eventType:
          type: string
        status:
          type: string
        organizer:
          type: object
          properties:
            objectId:
              type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: Error message describing the issue
